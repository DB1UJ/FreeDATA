name: Build/PROJECT
on:
  push:
    #tags:
     #- '*'
    
jobs:

  build_windows_release:
    name: Build Windows release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            zip_name: windows_tnc
            generator: Visual Studio 16 2019

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
          
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9  
          
      - name: Install Python dependencies
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install psutil
          pip install crcengine
          pip install pyinstaller
          pip install ujson
          pip install pyserial
          pip install numpy
          pip install structlog
          pip install colorama
          # curl.exe --output PyAudio-0.2.11-cp39-cp39-win_amd64.whl --url https://download.lfd.uci.edu/pythonlibs/y2rycu7g/PyAudio-0.2.11-cp39-cp39-win_amd64.whl
          # pip install PyAudio-0.2.11-cp39-cp39-win_amd64.whl
      
      - name: Install Pyaudio
        if: matrix.os == 'windows-latest'
        working-directory: tnc/lib/pyaudio/windows
        run: |
          pip install PyAudio-0.2.11-cp39-cp39-win_amd64.whl
                 

      - name: Build Windows Daemon
        if: matrix.os == 'windows-latest'
        working-directory: tnc
        run: |      
          pyinstaller -F --add-binary lib/hamlib/win32/libgcc_s_sjlj-1.dll:./lib/hamlib/win32/ --add-binary lib/hamlib/win32/libhamlib-4.dll:./lib/hamlib/win32/ --add-binary lib/hamlib/win32/libusb-1.0.dll:./lib/hamlib/win32/ --add-binary lib/hamlib/win32/libwinpthread-1.dll:./lib/hamlib/win32/ --add-binary lib/hamlib/win32/rigctl.exe:./lib/hamlib/win32/ --add-binary lib/hamlib/win64/libgcc_s_sjlj-1.dll:./lib/hamlib/win64/ --add-binary lib/hamlib/win64/libhamlib-4.dll:./lib/hamlib/win64/ --add-binary lib/hamlib/win64/libusb-1.0.dll:./lib/hamlib/win64/ --add-binary lib/hamlib/win64/libwinpthread-1.dll:./lib/hamlib/win64/ --add-binary lib/hamlib/win64/rigctl.exe:./lib/hamlib/win64/ daemon.py -n daemon
            
      - name: Build Windows TNC
        if: matrix.os == 'windows-latest'
        working-directory: tnc
        run: |                
          pyinstaller -F --add-binary lib/codec2/windows/libcodec2.dll:. --add-binary lib/codec2/windows/libcodec2.dll:./lib/codec2/windows/ --add-binary lib/hamlib/win32/libgcc_s_sjlj-1.dll:./lib/hamlib/win32/ --add-binary lib/hamlib/win32/libhamlib-4.dll:./lib/hamlib/win32/ --add-binary lib/hamlib/win32/libusb-1.0.dll:./lib/hamlib/win32/ --add-binary lib/hamlib/win32/libwinpthread-1.dll:./lib/hamlib/win32/ --add-binary lib/hamlib/win32/rigctl.exe:./lib/hamlib/win32/ --add-binary lib/hamlib/win64/libgcc_s_sjlj-1.dll:./lib/hamlib/win64/ --add-binary lib/hamlib/win64/libhamlib-4.dll:./lib/hamlib/win64/ --add-binary lib/hamlib/win64/libusb-1.0.dll:./lib/hamlib/win64/ --add-binary lib/hamlib/win64/libwinpthread-1.dll:./lib/hamlib/win64/ --add-binary lib/hamlib/win64/rigctl.exe:./lib/hamlib/win64/ main.py -n tnc  

          

      - name: LIST ALL FILES
        shell: bash
        run: |
          ls -R  
          
      #- name: Build codec2
      #  shell: bash
      #  run: |
      #    choco install ninja cmake
      #    ninja --version
      #    cmake --version      
          
      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 14         

      - name: Copy TNC to GUI Windows
        if: matrix.os == 'windows-latest'
        run: |          
          cp -R ./tnc/dist ./gui/tnc
          ls -R        
          
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: "./gui/"
          github_token: ${{ secrets.github_token }}

      - name: LIST ALL FILES
        shell: bash
        run: |
          ls -R   
          
      - name: chmod +x
        shell: bash
        run: |
          chmod +x ./gui/dist/*.*    
          
          
      - name: Create app bundle
        shell: bash
        run: |
          mkdir gui-bundle
          cp ./gui/dist/*.* gui-bundle
          cp ./tnc/dist/daemon.exe gui-bundle
          cp ./tnc/dist/tnc.exe gui-bundle
          chmod +x ./gui-bundle/tnc
          chmod +x ./gui-bundle/daemon
          cd ./gui-bundle
          ls -R  
       
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
            type: 'zip'
            filename: 'FreeDATA_windows.zip'
            directory: ./gui-bundle/
            path: .
            #exclusions: '*.git* /*node_modules/* .editorconfig'   
                    
      - name: Upload Windows GUI Bundle artifacts
        uses: actions/upload-artifact@v2
        with:
          name: gui-bundle-windows-artifact
          path: ./gui-bundle/FreeDATA_windows.zip          
          

  build_linux_release:
    name: Build Linux release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            zip_name: ubuntu_tnc
            generator: Unix Makefiles

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
          
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9     
                
        
          
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt install portaudio19-dev libhamlib-dev libhamlib-utils build-essential cmake python3-libhamlib2
          python -m pip install --upgrade pip
          pip3 install pyaudio
          pip3 install psutil
          pip3 install crcengine
          pip3 install pyinstaller
          pip3 install ujson
          pip3 install pyserial
          pip3 install numpy
          pip3 install structlog


      #- name: Build Hamlib Python Binding
      #  if: matrix.os == 'ubuntu-latest'
      #  working-directory: tnc
      #  run: |      
      #    sudo apt install wig libtool
      #    cd ~
      #    git clone https://github.com/Hamlib/Hamlib.git
      #    cd Hamlib
      #    ./bootstrap
      #    ./configure --with-python-binding PYTHON_VERSION='3.9' --prefix=$HOME/local
      #    make
      #    make install
          



      - name: Build codec2 Linux
        if: matrix.os == 'ubuntu-20.04'
        #working-directory: tnc
        run: |
          cd ~
          git clone https://github.com/drowe67/codec2.git
          cd codec2 && mkdir build_linux && cd build_linux
          cmake ../
          make
          
          
      - name: Build Linux Daemon
        if: matrix.os == 'ubuntu-20.04'
        working-directory: tnc
        run: |      
          pyinstaller -F --add-binary lib/hamlib/linux/libhamlib.so:./lib/hamlib/linux/ -n daemon daemon.py
            
      - name: Build Linux TNC
        if: matrix.os == 'ubuntu-20.04'
        working-directory: tnc
        run: |   
          pyinstaller -F --add-binary ~/codec2/build_linux/src/libcodec2.so.1.0:. --add-binary lib/hamlib/linux/libhamlib.so:./lib/hamlib/linux/ -n tnc main.py
 
      - name: LIST ALL FILES
        shell: bash
        run: |
          ls -R   

          
      - name: Compress Linux
        shell: bash
        run: |
          cd ./tnc/dist
          mkdir compressed
          zip -r ./compressed/${{ matrix.zip_name }}.zip *

      - name: Upload Ubuntu TNC artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tnc-artifact
          path: ./tnc/dist/compressed/*

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 14
          
      - name: Copy TNC to GUI Linux
        if: matrix.os == 'ubuntu-20.04'
        run: |          
          cp -R ./tnc/dist ./gui/tnc
          ls -R        
          
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: "./gui/"
          github_token: ${{ secrets.github_token }}

      - name: LIST ALL FILES
        shell: bash
        run: |
          ls -R   
          
      - name: chmod +x
        shell: bash
        run: |
          chmod +x ./gui/dist/*.AppImage    
          
          
      - name: Create app bundle
        shell: bash
        run: |
          mkdir gui-bundle
          cp ./gui/dist/*.AppImage gui-bundle
          cp ./tnc/dist/daemon gui-bundle
          cp ./tnc/dist/tnc gui-bundle
          chmod +x ./gui-bundle/tnc
          chmod +x ./gui-bundle/daemon
          cd ./gui-bundle
          zip -r FreeDATA_linux.zip .
          ls -R  
       
       
       
          
      - name: Upload Ubuntu GUI Bundle artifacts
        uses: actions/upload-artifact@v2
        with:
          name: gui-bundle-ubuntu-artifact
          path: ./gui-bundle/FreeDATA_linux.zip




  release:
    name: Upload Release
    needs: [build_linux_release, build_windows_release]
    runs-on: ubuntu-20.04
    steps:
    
    
      - name: Download artifact
        uses: actions/download-artifact@v2
      
          
      - name: LIST ALL FILES
        shell: bash
        run: |
          ls -R      

    
      - name: Release
        uses: WebFreak001/deploy-nightly@v1.1.0
        #uses: softprops/action-gh-release@v1
        #if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/DJ2LS/FreeDATA/releases/48616289/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
          release_id: 48616289 # same as above (id can just be taken out the upload_url, it's used to find old releases)
          asset_path: ./gui-bundle-ubuntu-artifact/FreeDATA_linux.zip # path to archive to upload
          asset_name: FreeDATA_linux-nightly-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
          asset_content_type: application/zip # required by GitHub API
          max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
          #files: |
          #  ./gui-bundle-ubuntu-artifact/codec2-FreeDATA_ubuntu.zip
          #  ./tnc-artifact/ubuntu_tnc.zip
          #  LICENSE
